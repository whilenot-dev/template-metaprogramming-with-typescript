#!/usr/bin/env -S node --no-warnings

import path from "path";
import { fileURLToPath } from "url";

import ts from "typescript";

import data from "../data/input.json" assert { type: "json" };

main();

function main() {
  const interfaces = data.map(({ name, type }) =>
    ts.factory.createInterfaceDeclaration(
      undefined,
      `SomeInterface${name}`,
      undefined,
      undefined,
      [
        ts.factory.createPropertySignature(
          undefined,
          "discriminator",
          undefined,
          ts.factory.createStringLiteral(name),
        ),
        ts.factory.createPropertySignature(
          undefined,
          "type",
          undefined,
          ts.factory.createIdentifier(type),
        ),
      ],
    ),
  );
  const union = ts.factory.createTypeAliasDeclaration(
    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
    "SomeInterface",
    undefined,
    ts.factory.createUnionTypeNode(interfaces.map((val) => val.name)),
  );
  const statements = [...interfaces, union]
    .flatMap((val) => [ts.factory.createIdentifier("\n"), val])
    .slice(1);

  const sourceFile = ts.factory.createSourceFile(
    statements,
    ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
    ts.NodeFlags.None,
  );
  const printerOptions = {
    newLine: ts.NewLineKind.LineFeed,
  };
  const printer = ts.createPrinter(printerOptions);
  const result = printer.printFile(sourceFile);

  const scriptFile = fileURLToPath(import.meta.url);
  const projectDir = path.join(scriptFile, "..", "..");
  const scriptFileRel = path.relative(projectDir, scriptFile);
  console.log(`/* autogenerated by ${scriptFileRel} */`);

  console.log(result);
}
