#!/usr/bin/env -S node --no-warnings

import path from "path";
import { fileURLToPath } from "url";

import ts from "typescript";

import data from "../data/input.json" assert { type: "json" };

main();

function main() {
  const statements = [...data.map(interfaceFromEntry), unionFromData(data)]
    .flatMap((val) => [ts.factory.createIdentifier("\n"), val])
    .slice(1);

  const sourceFile = ts.factory.createSourceFile(
    statements,
    ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
    ts.NodeFlags.None,
  );
  const printerOptions = {
    newLine: ts.NewLineKind.LineFeed,
  };
  const printer = ts.createPrinter(printerOptions);
  const result = printer.printFile(sourceFile);

  const filename = fileURLToPath(import.meta.url);
  const basename = path.basename(filename);
  console.log(`/* autogenerated by ${basename} */`);

  console.log(result);
}

function interfaceFromEntry({ name, type }) {
  return ts.factory.createInterfaceDeclaration(
    undefined,
    `SomeInterface${name}`,
    undefined,
    undefined,
    [
      ts.factory.createPropertySignature(
        undefined,
        "discriminator",
        undefined,
        ts.factory.createStringLiteral(name),
      ),
      ts.factory.createPropertySignature(
        undefined,
        "type",
        undefined,
        ts.factory.createIdentifier(type),
      ),
    ],
  );
}

function unionFromData(data) {
  return ts.factory.createTypeAliasDeclaration(
    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
    "SomeInterface",
    undefined,
    ts.factory.createUnionTypeNode(
      data.map((val) =>
        ts.factory.createIdentifier(`SomeInterface${val.name}`),
      ),
    ),
  );
}
